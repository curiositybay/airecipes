name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: docker.io

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Jest cache
        uses: actions/cache@v4
        with:
          path: .jest-cache
          key: ${{ runner.os }}-jest-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-jest-

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run tests with coverage
        run: npm run test:coverage

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH for environment file access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ vars.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Fetch production environment file
        run: |
          echo "üì• Fetching production environment file from server..."
          if scp ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }}:${{ vars.ENV_PATH }} ./env.production; then
            echo "‚úÖ Production environment file fetched successfully"
            echo "üìÑ Environment file size: $(wc -c < ./env.production) bytes"
          else
            echo "‚ùå Failed to fetch production environment file"
            echo "üí° Please check:"
            echo "   - SSH key permissions"
            echo "   - Server path: ${{ vars.ENV_PATH }}"
            echo "   - Server user: ${{ vars.SERVER_USER }}"
            echo "   - Server host: ${{ vars.SERVER_HOST }}"
            exit 1
          fi

      - name: Extract values from environment file
        run: |
          echo "üîç Extracting values from environment file..."

          # Read values from the fetched .env file
          export DOCKERHUB_USER=$(grep '^DOCKERHUB_USER=' ./env.production | cut -d'=' -f2)
          export APP_NAME=$(grep '^APP_NAME=' ./env.production | cut -d'=' -f2)

          # Validate extracted values
          if [ -z "$DOCKERHUB_USER" ]; then
            echo "‚ùå DOCKERHUB_USER not found in environment file"
            exit 1
          fi

          if [ -z "$APP_NAME" ]; then
            echo "‚ùå APP_NAME not found in environment file"
            exit 1
          fi

          # Set GitHub environment variables for later steps
          echo "DOCKERHUB_USER=${DOCKERHUB_USER}" >> $GITHUB_ENV
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV

          echo "‚úÖ Extracted DOCKERHUB_USER: ${DOCKERHUB_USER}"
          echo "‚úÖ Extracted APP_NAME: ${APP_NAME}"

      - name: Debug extracted values
        run: |
          echo "üîç Debugging extracted values..."
          echo "DOCKERHUB_USER: '${{ env.DOCKERHUB_USER }}'"
          echo "APP_NAME: '${{ env.APP_NAME }}'"
          echo "DOCKERHUB_TOKEN exists: ${{ secrets.DOCKERHUB_TOKEN != '' }}"

      - name: Test Docker Hub authentication
        run: |
          echo "üîê Testing Docker Hub authentication..."
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username ${{ env.DOCKERHUB_USER }} --password-stdin
          echo "‚úÖ Docker Hub authentication successful!"

      - name: Test repository access
        run: |
          echo "üîç Testing repository access..."
          echo "Repository: ${{ env.DOCKERHUB_USER }}/${{ env.APP_NAME }}"
          echo "Docker Hub user: ${{ env.DOCKERHUB_USER }}"
          echo "App name: ${{ env.APP_NAME }}"

          # Test if we can pull from the repository (this tests permissions)
          docker pull ${{ env.DOCKERHUB_USER }}/${{ env.APP_NAME }}:latest || echo "Repository doesn't exist yet (this is normal for first build)"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKERHUB_USER }}/${{ env.APP_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENV_FILE=env.production

      - name: Clean up environment file
        if: always()
        run: |
          echo "üßπ Cleaning up environment file..."
          rm -f ./env.production
          echo "‚úÖ Environment file cleaned up"

      - name: Deployment notification
        run: |
          echo "‚úÖ Docker image built and pushed successfully!"
          echo "üì¶ Image: ${{ env.DOCKERHUB_USER }}/${{ env.APP_NAME }}:latest"

      - name: Set job outputs
        run: |
          echo "app_name=${{ env.APP_NAME }}" >> $GITHUB_OUTPUT
          echo "dockerhub_user=${{ env.DOCKERHUB_USER }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ vars.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Fetch production environment file
        run: |
          echo "üì• Fetching production environment file from server..."
          if scp ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }}:${{ vars.ENV_PATH }} ./env.production; then
            echo "‚úÖ Production environment file fetched successfully"
          else
            echo "‚ùå Failed to fetch production environment file"
            exit 1
          fi

      - name: Extract APP_NAME from environment file
        run: |
          echo "üîç Extracting APP_NAME from environment file..."
          export APP_NAME=$(grep '^APP_NAME=' ./env.production | cut -d'=' -f2)
          export DOCKERHUB_USER=$(grep '^DOCKERHUB_USER=' ./env.production | cut -d'=' -f2)

          if [ -z "$APP_NAME" ]; then
            echo "‚ùå APP_NAME not found in environment file"
            exit 1
          fi

          if [ -z "$DOCKERHUB_USER" ]; then
            echo "‚ùå DOCKERHUB_USER not found in environment file"
            exit 1
          fi

          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
          echo "DOCKERHUB_USER=${DOCKERHUB_USER}" >> $GITHUB_ENV
          echo "‚úÖ Extracted APP_NAME: ${APP_NAME}"
          echo "‚úÖ Extracted DOCKERHUB_USER: ${DOCKERHUB_USER}"

      - name: Debug deploy variables
        run: |
          echo "üîç Debugging deploy variables..."
          echo "APP_NAME: '${{ env.APP_NAME }}'"
          echo "DOCKERHUB_USER: '${{ env.DOCKERHUB_USER }}'"
          echo "SERVER_USER: '${{ vars.SERVER_USER }}'"
          echo "SERVER_HOST: '${{ vars.SERVER_HOST }}'"
          echo "Build outputs:"
          echo "  - dockerhub_user: '${{ needs.build.outputs.dockerhub_user }}'"
          echo "  - app_name: '${{ needs.build.outputs.app_name }}'"

      - name: Deploy to server
        run: |
          echo "üöÄ Deploying to production server..."
          echo "üì¶ App name: ${{ env.APP_NAME }}"

          # SSH into server and run deploy scripts for app.
          ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "dc deploy ${{ env.APP_NAME }}"

          echo "‚úÖ Deployment completed successfully!"
          echo "üì¶ Deployed image: ${{ needs.build.outputs.dockerhub_user }}/${{ env.APP_NAME }}:latest"
